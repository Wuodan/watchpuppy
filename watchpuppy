#!/usr/bin/env sh

set -e

SCRIPT_NAME="watchpuppy.sh"
LOG_LEVEL=${LOG_LEVEL:-"INFO"}

log() {
  LEVEL=$1
  MESSAGE=$2

  # No associative arrays in sh, use case structure instead
  case "$LEVEL" in
    "DEBUG") LEVEL_NUM=10 ;;
    "INFO") LEVEL_NUM=20 ;;
    "WARNING") LEVEL_NUM=30 ;;
    "ERROR") LEVEL_NUM=40 ;;
    "CRITICAL") LEVEL_NUM=50 ;;
    *) LEVEL_NUM=0 ;;
  esac

  case "$LOG_LEVEL" in
    "DEBUG") LOG_LEVEL_NUM=10 ;;
    "INFO") LOG_LEVEL_NUM=20 ;;
    "WARNING") LOG_LEVEL_NUM=30 ;;
    "ERROR") LOG_LEVEL_NUM=40 ;;
    "CRITICAL") LOG_LEVEL_NUM=50 ;;
    *) LOG_LEVEL_NUM=20 ;;  # Default to INFO
  esac

  if [ "$LEVEL_NUM" -ge "$LOG_LEVEL_NUM" ]; then
    echo "$SCRIPT_NAME - $LEVEL - $MESSAGE"
  fi
}

monitor_directory() {
    inotifywait -m -r -e close_write --format '%w%f' "$WATCH_DIR" | while read -r NEWFILE; do
        log "INFO" "New file detected: $NEWFILE"
        "$PROCESS_SCRIPT" "$NEWFILE"
    done
}

# Check if the filesystem type supports inotify
check_inotify_support() {
    # Read file system type
    FS_TYPE=$(stat -f -c %T "$WATCH_DIR")
    # These file systems do not support inotify
    if [ "$FS_TYPE" = "v9fs" ] || [ "$FS_TYPE" = "fuseblk" ] || [ "$FS_TYPE" = "nfs" ] || [ "$FS_TYPE" = "cifs" ] || [ "$FS_TYPE" = "smbfs" ]; then
        return 1
    else
        return
    fi
}

# Check if exactly two arguments are provided
if [ $# -ne 2 ]; then
    log "ERROR" "Usage: $0 /path/to/directory /path/to/process-script"
    exit 1
fi

WATCH_DIR="$1"
PROCESS_SCRIPT="$2"

if check_inotify_support; then
    log "INFO" "Using inotifywait."
    monitor_directory
else
    log "INFO" "Switching to Python polling."
    exec python3 /path/to/watchpuppy.py "$WATCH_DIR" "$PROCESS_SCRIPT"
fi
